"use strict";
(self["webpackChunkmyapp"] = self["webpackChunkmyapp"] || []).push([["node_modules_neo_mjs_src_main_addon_ServiceWorker_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/Base.mjs":
/*!******************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/Base.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./node_modules/neo.mjs/src/main/addon/ServiceWorker.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/ServiceWorker.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./node_modules/neo.mjs/src/main/addon/Base.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./node_modules/neo.mjs/src/worker/Manager.mjs");



/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.main.addon.Base
 */
class ServiceWorker extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker'
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.registerServiceWorker()
    }

    /**
     * @returns {Promise<void>}
     */
    async registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            let me              = this,
                {config}        = Neo,
                {environment}   = config,
                devMode         = environment === 'development',
                distEsm         = environment === 'dist/esm',
                hasJsModules    = devMode || distEsm,
                fileName        = hasJsModules ? 'ServiceWorker.mjs' : 'serviceworker.js',
                opts            = hasJsModules ? {type: 'module'} : {},
                path            = (hasJsModules ? config.basePath : config.workerBasePath) + fileName,
                {serviceWorker} = navigator,
                registration;

            if (distEsm) {
                path = path.substring(6)
            }

            registration = await serviceWorker.register(path, opts);

            window.addEventListener('beforeunload', me.onBeforeUnload.bind(me));

            registration.addEventListener('updatefound', () => {
                window.location.reload()
            })

            await serviceWorker.ready;

            serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);

            if (!_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getWorker('service')) {
                /*
                 * navigator.serviceWorker.controller can be null in case we load a page for the first time
                 * or in case of a force refresh.
                 * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller
                 */
                _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].serviceWorker = registration.active
            }

            _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
                action: 'registerNeoConfig',
                data  : config
            })
        }
    }

    /**
     *
     */
    onBeforeUnload() {
        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
            action: 'unregisterPort'
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(ServiceWorker));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vbm9kZV9tb2R1bGVzX25lb19tanNfc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVE7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QyxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSxpRUFBZSxvQkFBb0IsRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5R0c7QUFDYzs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpREFBSTtBQUNoQztBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQixJQUFJO0FBQ3RFO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBLHNDQUFzQywyREFBYSxzQkFBc0IsMkRBQWE7O0FBRXRGLGlCQUFpQiwyREFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDJEQUFhO0FBQzdCOztBQUVBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyREFBYTtBQUNyQjtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBLGlFQUFlLDZCQUE2QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvbmVvLm1qcy9zcmMvbWFpbi9hZGRvbi9CYXNlLm1qcyIsIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9uZW8ubWpzL3NyYy9tYWluL2FkZG9uL1NlcnZpY2VXb3JrZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb3JlQmFzZSBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBtYWluIHRocmVhZCBhZGRvbnNcbiAqIEBjbGFzcyBOZW8ubWFpbi5hZGRvbi5CYXNlXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIEJhc2UgZXh0ZW5kcyBDb3JlQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5CYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGlkZW50aWZpZXIgZm9yIGNvcmUuQmFzZSB0byBnZXQgaGFuZGxlZCBsaWtlIHNpbmdsZXRvbnMgZm9yIHJlbW90ZSBtZXRob2QgYWNjZXNzXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzTWFpblRocmVhZEFkZG9uPXRydWVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNNYWluVGhyZWFkQWRkb246IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIGdldCBzZXQgdG8gdHJ1ZSBvbmNlIGFsbCBhZGRvbiByZWxhdGVkIGZpbGVzIGdvdCBsb2FkZWQgKGlmIHRoZXJlIGlzIGEgbmVlZCB0byBsb2FkKVxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc1JlYWR5Xz1mYWxzZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpc1JlYWR5XzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbW91bnQgaW4gbXMgdG8gZGVsYXkgdGhlIGxvYWRpbmcgb2YgbGlicmFyeSBmaWxlcywgdW5sZXNzIHJlbW90ZSBtZXRob2QgYWNjZXNzIGhhcHBlbnNcbiAgICAgICAgICogQ2hhbmdlIHRoZSB2YWx1ZSB0byBmYWxzZSBpbiBjYXNlIHlvdSBkb24ndCB3YW50IGFuIGF1dG9tYXRlZCBwcmVsb2FkaW5nXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW58TnVtYmVyfSBwcmVsb2FkRmlsZXNEZWxheT01MDAwXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHByZWxvYWRGaWxlc0RlbGF5OiA1MDAwLFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdFtdfSBjYWNoZT1bXVxuICAgICAqL1xuICAgIGNhY2hlID0gW11cbiAgICAvKipcbiAgICAgKiBXaWxsIGdldCBzZXQgdG8gdHJ1ZSBvbmNlIHdlIHN0YXJ0IGxvYWRpbmcgTW9uYWNvIHJlbGF0ZWQgZmlsZXNcbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc0xvYWRpbmc9ZmFsc2VcbiAgICAgKi9cbiAgICBpc0xvYWRpbmcgPSBmYWxzZVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGZsYWcgdG8gc3RvcmUgdGhlIHNldFRpbWVvdXQoKSBpZCBmb3IgbG9hZGluZyBleHRlcm5hbCBmaWxlc1xuICAgICAqIEBtZW1iZXIge051bWJlcnxudWxsfSBsb2FkaW5nVGltZW91dElkPW51bGxcbiAgICAgKi9cbiAgICBsb2FkaW5nVGltZW91dElkID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAobWUubG9hZEZpbGVzKSB7XG4gICAgICAgICAgICBpZiAobWUucHJlbG9hZEZpbGVzRGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBtZS5sb2FkRmlsZXMoKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChOZW8uaXNOdW1iZXIobWUucHJlbG9hZEZpbGVzRGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgbWUubG9hZGluZ1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtZS5sb2FkRmlsZXMoKVxuICAgICAgICAgICAgICAgIH0sIG1lLnByZWxvYWRGaWxlc0RlbGF5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBpc1JlYWR5IGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0SXNSZWFkeSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHJldHVyblZhbHVlO1xuXG4gICAgICAgICAgICBtZS5jYWNoZS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gbWVbaXRlbS5mbl0oaXRlbS5kYXRhKTtcbiAgICAgICAgICAgICAgICBpdGVtLnJlc29sdmUocmV0dXJuVmFsdWUpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWUuY2FjaGUgPSBbXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWxseSBjYWNoZXMgY2FsbCB3aGVuIGlzUmVhZHk9PT1mYWxzZVxuICAgICAqIExvYWRzIHRoZSBsaWJyYXJ5IGZpbGVzIGluIGNhc2UgdGhpcyBpcyBub3QgYWxyZWFkeSBoYXBwZW5pbmdcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fVxuICAgICAqL1xuICAgIGNhY2hlTWV0aG9kQ2FsbChpdGVtKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFtZS5pc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIG1lLmxvYWRpbmdUaW1lb3V0SWQgJiYgY2xlYXJUaW1lb3V0KG1lLmxvYWRpbmdUaW1lb3V0SWQpO1xuICAgICAgICAgICAgbWUubG9hZGluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICBtZS5sb2FkRmlsZXMoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG1lLmNhY2hlLnB1c2goey4uLml0ZW0sIHJlc29sdmV9KVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoQmFzZSk7XG4iLCJpbXBvcnQgQmFzZSAgICAgICAgICBmcm9tICcuL0Jhc2UubWpzJztcbmltcG9ydCBXb3JrZXJNYW5hZ2VyIGZyb20gJy4uLy4uL3dvcmtlci9NYW5hZ2VyLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNlcnZpY2VXb3JrZXIgaW5zdGFuY2UsIGluIGNhc2UgTmVvLmNvbmZpZy51c2VTZXJ2aWNlV29ya2VyIGlzIHNldCB0byB0cnVlXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlclxuICogQGV4dGVuZHMgTmVvLm1haW4uYWRkb24uQmFzZVxuICovXG5jbGFzcyBTZXJ2aWNlV29ya2VyIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyJ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyU2VydmljZVdvcmtlcigpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgYXN5bmMgcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCkge1xuICAgICAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgICAgICAgICAgbGV0IG1lICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAge2NvbmZpZ30gICAgICAgID0gTmVvLFxuICAgICAgICAgICAgICAgIHtlbnZpcm9ubWVudH0gICA9IGNvbmZpZyxcbiAgICAgICAgICAgICAgICBkZXZNb2RlICAgICAgICAgPSBlbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JyxcbiAgICAgICAgICAgICAgICBkaXN0RXNtICAgICAgICAgPSBlbnZpcm9ubWVudCA9PT0gJ2Rpc3QvZXNtJyxcbiAgICAgICAgICAgICAgICBoYXNKc01vZHVsZXMgICAgPSBkZXZNb2RlIHx8IGRpc3RFc20sXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgICAgICAgID0gaGFzSnNNb2R1bGVzID8gJ1NlcnZpY2VXb3JrZXIubWpzJyA6ICdzZXJ2aWNld29ya2VyLmpzJyxcbiAgICAgICAgICAgICAgICBvcHRzICAgICAgICAgICAgPSBoYXNKc01vZHVsZXMgPyB7dHlwZTogJ21vZHVsZSd9IDoge30sXG4gICAgICAgICAgICAgICAgcGF0aCAgICAgICAgICAgID0gKGhhc0pzTW9kdWxlcyA/IGNvbmZpZy5iYXNlUGF0aCA6IGNvbmZpZy53b3JrZXJCYXNlUGF0aCkgKyBmaWxlTmFtZSxcbiAgICAgICAgICAgICAgICB7c2VydmljZVdvcmtlcn0gPSBuYXZpZ2F0b3IsXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uO1xuXG4gICAgICAgICAgICBpZiAoZGlzdEVzbSkge1xuICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZyg2KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWdpc3RyYXRpb24gPSBhd2FpdCBzZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHBhdGgsIG9wdHMpO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgbWUub25CZWZvcmVVbmxvYWQuYmluZChtZSkpO1xuXG4gICAgICAgICAgICByZWdpc3RyYXRpb24uYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZm91bmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBhd2FpdCBzZXJ2aWNlV29ya2VyLnJlYWR5O1xuXG4gICAgICAgICAgICBzZXJ2aWNlV29ya2VyLm9ubWVzc2FnZSA9IFdvcmtlck1hbmFnZXIub25Xb3JrZXJNZXNzYWdlLmJpbmQoV29ya2VyTWFuYWdlcik7XG5cbiAgICAgICAgICAgIGlmICghV29ya2VyTWFuYWdlci5nZXRXb3JrZXIoJ3NlcnZpY2UnKSkge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlciBjYW4gYmUgbnVsbCBpbiBjYXNlIHdlIGxvYWQgYSBwYWdlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAgICAgICAgICAqIG9yIGluIGNhc2Ugb2YgYSBmb3JjZSByZWZyZXNoLlxuICAgICAgICAgICAgICAgICAqIFNlZTogaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlcnZpY2Utd29ya2Vycy8jbmF2aWdhdG9yLXNlcnZpY2Utd29ya2VyLWNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBXb3JrZXJNYW5hZ2VyLnNlcnZpY2VXb3JrZXIgPSByZWdpc3RyYXRpb24uYWN0aXZlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VuZE1lc3NhZ2UoJ3NlcnZpY2UnLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAncmVnaXN0ZXJOZW9Db25maWcnLFxuICAgICAgICAgICAgICAgIGRhdGEgIDogY29uZmlnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkJlZm9yZVVubG9hZCgpIHtcbiAgICAgICAgV29ya2VyTWFuYWdlci5zZW5kTWVzc2FnZSgnc2VydmljZScsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VucmVnaXN0ZXJQb3J0J1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoU2VydmljZVdvcmtlcik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
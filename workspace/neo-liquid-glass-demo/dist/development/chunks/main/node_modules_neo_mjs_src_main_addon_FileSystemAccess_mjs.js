"use strict";
(self["webpackChunkmyapp"] = self["webpackChunkmyapp"] || []).push([["node_modules_neo_mjs_src_main_addon_FileSystemAccess_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/Base.mjs":
/*!******************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/Base.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./node_modules/neo.mjs/src/main/addon/FileSystemAccess.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/FileSystemAccess.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./node_modules/neo.mjs/src/main/addon/Base.mjs");


/**
 * Basic support for File System Access API
 *
 * Note: the "File System API" is available in Web Workers.
 * However, the "File System Access API" extensions are Not available in Web Workers,
 * because they must handle user gestures and Web Workers do Not have access to the
 * UI, aka main, thread.
 *
 * The extensions return a promises fulfilled by FileSystemHandles,
 * the FileSystemHandles are serializable and make it through (Neo's) Web Worker
 * postMessage signaling to the App worker code, and we are in business,
 *
 * Only supported by Chrome, Edge, Opera; tested with Neo on Chrome, Opera, Edge:
 * https://developer.chrome.com/docs/capabilities/web-apis/file-system-access#browser_support
 *
 * Note:  method parameters (the opts below) are identical to the method parameters in
 * https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker
 *
 * @class Neo.main.addon.FileSystemAccess
 * @extends Neo.main.addon.Base
 */
class FileSystemAccess extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.FileSystemAccess'
         * @protected
         */
        className: 'Neo.main.addon.FileSystemAccess',
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'showDirectoryPicker',
                'showOpenFilePicker',
                'showSaveFilePicker',
                'supported'
            ]
        }
    }

    /**
     * Shows a directory picker which allows the user to select a directory.
     * returns a promise fulfilled by a directory handle object.
     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker
     * @param {Object} [opts]
     * @returns {Promise<FileSystemDirectoryHandle>}
     */
    async showDirectoryPicker(opts) {
       return await window.showDirectoryPicker(opts)
    }

    /**
     * Shows a file picker which allows a user to select a file or files.
     * returns a promise fulfilled an array of 1 or more filehandle objects.
     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker
     * @param {Object} [opts]
     * @returns {Promise<FileSystemFileHandle[]>}
     */
    async showOpenFilePicker(opts) {
       return await window.showOpenFilePicker(opts)
    }

    /**
     * Shows a file picker that allows a user to save a file.
     * returns a promise fulfilled by a filehandle object fulfillment.
     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/showSaveFilePicker
     * @param {Object} [opts]
     * @returns {Promise<FileSystemFileHandle>}
     */
    async showSaveFilePicker(opts) {
       return await window.showSaveFilePicker(opts)
    }

    /**
     * Tests if the browser supports the File System Access API.
     * @returns {Boolean}
     **/
    supported() {
        return 'showOpenFilePicker' in window
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(FileSystemAccess));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
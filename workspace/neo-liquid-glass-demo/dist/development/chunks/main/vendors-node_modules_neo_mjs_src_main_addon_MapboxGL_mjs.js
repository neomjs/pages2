"use strict";
(self["webpackChunkmyapp"] = self["webpackChunkmyapp"] || []).push([["vendors-node_modules_neo_mjs_src_main_addon_MapboxGL_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/Base.mjs":
/*!******************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/Base.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./node_modules/neo.mjs/src/main/addon/MapboxGL.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/MapboxGL.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./node_modules/neo.mjs/src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./node_modules/neo.mjs/src/main/DomAccess.mjs");



/**
 * Helper class to include Mapbox GL maps into your neo.mjs app
 * See: https://docs.mapbox.com/mapbox-gl-js/api/
 * In case you need more API methods to get exposed to the App worker,
 * please open issues inside the tracker and / or submit PRs.
 * @class Neo.main.addon.MapboxGL
 * @extends Neo.main.addon.Base
 */
class MapboxGL extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.MapboxGL'
         * @protected
         */
        className: 'Neo.main.addon.MapboxGL',
        /**
         * Stores all map data inside an object until mounting. key => map id
         * No array since in case a map gets loaded multiple times, we only want to apply the last data on mount.
         * @member {Object} dataMap={}
         * @protected
         */
        dataMap: {},
        /**
         * @member {String} downloadPath='https://api.mapbox.com/mapbox-gl-js/'
         * @protected
         */
        downloadPath: 'https://api.mapbox.com/mapbox-gl-js/',
        /**
         * Stores all extra map sources layers an object.
         * key => map id, value => {Array} layers
         * @member {Object} layers={}
         * @protected
         */
        layers: {},
        /**
         * Stores all map ids inside an object
         * @member {Object} maps={}
         * @protected
         */
        maps: {},
        /**
         * Stores all map config objects which arrived before the map lib scripts got loaded
         * @member {Object[]} mapsToCreate=[]
         * @protected
         */
        mapsToCreate: [],
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'addLayers',
                'addSources',
                'autoResize',
                'center',
                'create',
                'destroy',
                'setFilter',
                'setLayoutProperty',
                'setPaintProperty',
                'setStyle',
                'updateData',
                'zoom'
            ]
        },
        /**
         * @member {Boolean} scriptsLoaded_=true
         * @protected
         */
        scriptsLoaded_: false,
        /**
         * Stores all map sources inside an object.
         * key => map id, value => {Array} sources
         * @member {Object} sources={}
         * @protected
         */
        sources: {},
        /**
         * Stores all map style objects inside an objects to prevent reloads when switching themes multiple times.
         * key => style name (url)
         * @member {Object} styleMap={}
         * @protected
         */
        styleMap: {},
        /**
         * @member {String} version='v1.9.1'
         * @protected
         */
        version: 'v1.9.1',
        /**
         * Stores all map zoom values inside an object until mounting. key => map id
         * No array since in case a map gets zoomed multiple times, we only want to apply the last value on mount.
         * @member {Object} zoomMap={}
         * @protected
         */
        zoomMap: {}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.insertMapboxGLScripts()
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Object[]} data.layers
     */
    addLayers(data) {
        let me  = this,
            map = me.maps[data.id],
            beforeId;

        if (map) {
            data.layers.forEach(item => {
                beforeId = item.beforeId;
                delete item.beforeId;

                map.addLayer(item, beforeId)
            })
        } else {
            me.layers[data.id] = Object.assign(me.layers[data.id] || {}, data)
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Object[]} data.sources
     */
    addSources(data) {
        let me  = this,
            map = me.maps[data.id],
            id;

        if (map) {
            data.sources.forEach(item => {
                id = item.id;
                delete item.id;

                map.addSource(id, item)
            })
        } else {
            me.sources[data.id] = Object.assign(me.sources[data.id] || {}, data)
        }
    }

    /**
     * Triggered after the scriptsLoaded config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetScriptsLoaded(value, oldValue) {
        if (value) {
            let me = this;

            me.mapsToCreate.forEach(config => {
                me.create(config);
            });

            me.mapsToCreate = []
        }
    }

    /**
     * @param {Object} map
     * @param {Object} styleJson
     * @param {String} [name]
     */
    applyStyleObject(map, styleJson, name) {
        if (name) {
            this.styleMap[name] = styleJson
        }

        styleJson.layers.forEach(layer => {
            Object.entries(layer.paint).forEach(([key, value]) => {
                map.setPaintProperty(layer.id, key, value)
            })
        })
    }

    /**
     * Mounting a map into an inactive tab and activating it should call this
     * @param {Object} data
     * @param {String} data.id
     */
    autoResize(data) {
        let map = this.maps[data.id];

        map && this.timeout(100).then(() => {
            map.resize()
        })
    }

    /**
     * @param {Object} data
     * @param {Boolean} [data.animate=false]
     * @param {String} data.id
     * @param {Number} data.lat
     * @param {Number} data.lng
     */
    center(data) {
        let map    = this.maps[data.id],
            center = {lat: data.lat, lng: data.lng};

        if (map) {
            if (data.animate) {
                map.flyTo({center})
            } else {
                map.setCenter(center)
            }
        } else {
            // todo
        }
    }

    /**
     * @param {Object}   data
     * @param {String}   data.accessToken
     * @param {Object}   data.center
     * @param {Object}   [data.data]
     * @param {String}   [data.dataSourceId]
     * @param {String}   data.id
     * @param {Object[]} [data.layers]
     * @param {String}   data.mapboxStyle
     * @param {Object[]} [data.sources]
     * @param {String}   data.zoom
     */
    create(data) {
        let me = this;

        if (!me.scriptsLoaded) {
            me.mapsToCreate.push(data)
        } else {
            mapboxgl.accessToken = data.accessToken;

            let zoom = data.zoom;

            if (me.zoomMap[data.id]) {
                zoom = me.zoomMap[data.id].zoom;
                delete me.zoomMap[data.id]
            }

            me.maps[data.id] = new mapboxgl.Map({
                center   : data.center,
                container: data.id,
                style    : data.mapboxStyle,
                zoom     : zoom
            });

            me.maps[data.id].on('load', me.onMapLoaded.bind(me, data))
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     */
    destroy(data) {
        this.maps[data.id].remove();
        delete this.maps[data.id]
    }

    /**
     * @param {String} id
     * @returns {Boolean}
     */
    hasMap(id) {
        return !!this.maps[id]
    }

    insertMapboxGLScripts() {
        let me       = this,
            basePath = me.downloadPath + me.version + '/';

        Promise.all([
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(    basePath + 'mapbox-gl.js'),
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadStylesheet(basePath + 'mapbox-gl.css')
        ]).then(() => {
            me.scriptsLoaded = true
        })
    }

    /**
     * @param {Object} data
     * @param {Object} event
     * @param {Object} event.target map instance
     */
    onMapLoaded(data, event) {
        let me    = this,
            mapId = data.id;

        if (data.sources) {
            me.addSources({
                id     : data.id,
                sources: data.sources
            })
        } else if (me.sources[mapId]) {
            me.addSources(me.sources[mapId]);
            delete me.sources[mapId]
        }

        if (data.layers) {
            me.addLayers({
                id    : data.id,
                layers: data.layers
            })
        } else if (me.layers[mapId]) {
            me.addLayers(me.layers[mapId]);
            delete me.layers[mapId]
        }

        // map.loaded() is false at this point,
        // in case we do add layers / sources
        // the "idle" event seems to be the best fit
        if (event.target.loaded()) {
            me.onMapReallyLoaded(data, event)
        } else {
            event.target.once('idle', me.onMapReallyLoaded.bind(me, data))
        }
    }

    /**
     * @param {Object} data
     * @param {Object} event
     * @param {Object} event.target map instance
     */
    onMapReallyLoaded(data, event) {
        let me = this;

        me.timeout(100).then(() => {
            if (data.data) {
                me.updateData({
                    data        : data.data,
                    dataSourceId: data.dataSourceId,
                    id          : data.id
                })
            } else if (me.dataMap[data.id]) {
                me.updateData(me.dataMap[data.id])
            }
        })
    }

    /**
     * https://docs.mapbox.com/mapbox-gl-js/api/#map#setfilter
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.layerId
     * @param {Object} data.options
     * @param {Boolean} data.options.validate
     * @param {Array} data.value
     */
    setFilter(data) {
        let map = this.maps[data.id];

        if (map) {
            map.setFilter(data.layerId, data.value, data.options || {})
        } else {
            // todo: we could cache this and apply onMapLoaded
        }
    }

    /**
     * https://docs.mapbox.com/mapbox-gl-js/api/#map#setlayoutproperty
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.layerId
     * @param {String} data.key
     * @param {Object} data.options
     * @param {Boolean} data.options.validate
     * @param {String} data.value
     */
    setLayoutProperty(data) {
        let map = this.maps[data.id];

        if (map) {
            map.setLayoutProperty(data.layerId, data.key, data.value, data.options || {})
        } else {
            // todo: we could cache this and apply onMapLoaded
        }
    }

    /**
     * https://docs.mapbox.com/mapbox-gl-js/api/#map#setpaintproperty
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.layerId
     * @param {String} data.key
     * @param {Object} data.options
     * @param {Boolean} data.options.validate
     * @param {String} data.value
     */
    setPaintProperty(data) {
        let map = this.maps[data.id];

        if (map) {
            map.setPaintProperty(data.layerId, data.key, data.value, data.options || {})
        } else {
            // todo: we could cache this and apply onMapLoaded
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.accessToken
     * @param {String} data.id
     * @param {Object|String} data.style
     */
    setStyle(data) {
        let me = this;

        if (!me.scriptsLoaded || !me.hasMap(data.id)) {
            // todo
        } else {
            if (Neo.isString(data.style)) {
                if (data.style.indexOf('mapbox://styles/') === 0) {
                    data.style = data.style.substring(16)
                }

                if (me.styleMap[data.style]) {
                    me.applyStyleObject(me.maps[data.id], me.styleMap[data.style])
                } else {
                    fetch(`https://api.mapbox.com/styles/v1/${data.style}?access_token=${data.accessToken}`)
                        .then(response => response.json())
                        .then(styleJson => me.applyStyleObject(me.maps[data.id], styleJson, data.style))
                }
            }

            // map.setStyle breaks with only a console.warn()
            // => causing a full repaint, losing custom sources & layers
            // map.setStyle(data.style);
        }
    }

    /**
     * @param {Object} data
     * @param {Object} data.data
     * @param {String} data.dataSourceId
     * @param {String} data.id
     */
    updateData(data) {
        let me = this;

        if (!me.scriptsLoaded || !me.hasMap(data.id)) {
            me.dataMap[data.id] = data;
        } else {
            let map    = me.maps[data.id],
                source = map.getSource(data.dataSourceId);

            if (source) {
                source.setData(data.data);
                delete me.dataMap[data.id]
            } else {
                me.dataMap[data.id] = data
            }
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Number} data.zoom
     */
    zoom(data) {
        let map = this.maps[data.id];

        if (map) {
            map.setZoom(data.zoom)
        } else {
            this.zoomMap[data.id] = data
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MapboxGL));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vdmVuZG9ycy1ub2RlX21vZHVsZXNfbmVvX21qc19zcmNfbWFpbl9hZGRvbl9NYXBib3hHTF9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVE7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QyxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSxpRUFBZSxvQkFBb0IsRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5R0Q7QUFDTTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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Q3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdGQUF3RjtBQUN4RixVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsU0FBUztBQUN4QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUZBQXVGO0FBQ3ZGLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLGVBQWU7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiw4REFBOEQsV0FBVyxnQkFBZ0IsaUJBQWlCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSx3QkFBd0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL25lby5tanMvc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvbmVvLm1qcy9zcmMvbWFpbi9hZGRvbi9NYXBib3hHTC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvcmVCYXNlIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIG1haW4gdGhyZWFkIGFkZG9uc1xuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIENvcmVCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYWluLmFkZG9uLkJhc2UnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5tYWluLmFkZG9uLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gaWRlbnRpZmllciBmb3IgY29yZS5CYXNlIHRvIGdldCBoYW5kbGVkIGxpa2Ugc2luZ2xldG9ucyBmb3IgcmVtb3RlIG1ldGhvZCBhY2Nlc3NcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaXNNYWluVGhyZWFkQWRkb249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpc01haW5UaHJlYWRBZGRvbjogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdpbGwgZ2V0IHNldCB0byB0cnVlIG9uY2UgYWxsIGFkZG9uIHJlbGF0ZWQgZmlsZXMgZ290IGxvYWRlZCAoaWYgdGhlcmUgaXMgYSBuZWVkIHRvIGxvYWQpXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzUmVhZHlfPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzUmVhZHlfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFtb3VudCBpbiBtcyB0byBkZWxheSB0aGUgbG9hZGluZyBvZiBsaWJyYXJ5IGZpbGVzLCB1bmxlc3MgcmVtb3RlIG1ldGhvZCBhY2Nlc3MgaGFwcGVuc1xuICAgICAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIHRvIGZhbHNlIGluIGNhc2UgeW91IGRvbid0IHdhbnQgYW4gYXV0b21hdGVkIHByZWxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbnxOdW1iZXJ9IHByZWxvYWRGaWxlc0RlbGF5PTUwMDBcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgcHJlbG9hZEZpbGVzRGVsYXk6IDUwMDAsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0W119IGNhY2hlPVtdXG4gICAgICovXG4gICAgY2FjaGUgPSBbXVxuICAgIC8qKlxuICAgICAqIFdpbGwgZ2V0IHNldCB0byB0cnVlIG9uY2Ugd2Ugc3RhcnQgbG9hZGluZyBNb25hY28gcmVsYXRlZCBmaWxlc1xuICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzTG9hZGluZz1mYWxzZVxuICAgICAqL1xuICAgIGlzTG9hZGluZyA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZmxhZyB0byBzdG9yZSB0aGUgc2V0VGltZW91dCgpIGlkIGZvciBsb2FkaW5nIGV4dGVybmFsIGZpbGVzXG4gICAgICogQG1lbWJlciB7TnVtYmVyfG51bGx9IGxvYWRpbmdUaW1lb3V0SWQ9bnVsbFxuICAgICAqL1xuICAgIGxvYWRpbmdUaW1lb3V0SWQgPSBudWxsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS5sb2FkRmlsZXMpIHtcbiAgICAgICAgICAgIGlmIChtZS5wcmVsb2FkRmlsZXNEZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKE5lby5pc051bWJlcihtZS5wcmVsb2FkRmlsZXNEZWxheSkpIHtcbiAgICAgICAgICAgICAgICBtZS5sb2FkaW5nVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgICAgICAgICAgfSwgbWUucHJlbG9hZEZpbGVzRGVsYXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGlzUmVhZHkgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRJc1JlYWR5KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWU7XG5cbiAgICAgICAgICAgIG1lLmNhY2hlLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBtZVtpdGVtLmZuXShpdGVtLmRhdGEpO1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVzb2x2ZShyZXR1cm5WYWx1ZSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS5jYWNoZSA9IFtdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbGx5IGNhY2hlcyBjYWxsIHdoZW4gaXNSZWFkeT09PWZhbHNlXG4gICAgICogTG9hZHMgdGhlIGxpYnJhcnkgZmlsZXMgaW4gY2FzZSB0aGlzIGlzIG5vdCBhbHJlYWR5IGhhcHBlbmluZ1xuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59XG4gICAgICovXG4gICAgY2FjaGVNZXRob2RDYWxsKGl0ZW0pIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoIW1lLmlzTG9hZGluZykge1xuICAgICAgICAgICAgbWUubG9hZGluZ1RpbWVvdXRJZCAmJiBjbGVhclRpbWVvdXQobWUubG9hZGluZ1RpbWVvdXRJZCk7XG4gICAgICAgICAgICBtZS5sb2FkaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbWUuY2FjaGUucHVzaCh7Li4uaXRlbSwgcmVzb2x2ZX0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhCYXNlKTtcbiIsImltcG9ydCBCYXNlICAgICAgZnJvbSAnLi9CYXNlLm1qcyc7XG5pbXBvcnQgRG9tQWNjZXNzIGZyb20gJy4uL0RvbUFjY2Vzcy5tanMnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBpbmNsdWRlIE1hcGJveCBHTCBtYXBzIGludG8geW91ciBuZW8ubWpzIGFwcFxuICogU2VlOiBodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvYXBpL1xuICogSW4gY2FzZSB5b3UgbmVlZCBtb3JlIEFQSSBtZXRob2RzIHRvIGdldCBleHBvc2VkIHRvIHRoZSBBcHAgd29ya2VyLFxuICogcGxlYXNlIG9wZW4gaXNzdWVzIGluc2lkZSB0aGUgdHJhY2tlciBhbmQgLyBvciBzdWJtaXQgUFJzLlxuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLk1hcGJveEdMXG4gKiBAZXh0ZW5kcyBOZW8ubWFpbi5hZGRvbi5CYXNlXG4gKi9cbmNsYXNzIE1hcGJveEdMIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5NYXBib3hHTCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uTWFwYm94R0wnLFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGFsbCBtYXAgZGF0YSBpbnNpZGUgYW4gb2JqZWN0IHVudGlsIG1vdW50aW5nLiBrZXkgPT4gbWFwIGlkXG4gICAgICAgICAqIE5vIGFycmF5IHNpbmNlIGluIGNhc2UgYSBtYXAgZ2V0cyBsb2FkZWQgbXVsdGlwbGUgdGltZXMsIHdlIG9ubHkgd2FudCB0byBhcHBseSB0aGUgbGFzdCBkYXRhIG9uIG1vdW50LlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGRhdGFNYXA9e31cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgZGF0YU1hcDoge30sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGRvd25sb2FkUGF0aD0naHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBkb3dubG9hZFBhdGg6ICdodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy8nLFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGFsbCBleHRyYSBtYXAgc291cmNlcyBsYXllcnMgYW4gb2JqZWN0LlxuICAgICAgICAgKiBrZXkgPT4gbWFwIGlkLCB2YWx1ZSA9PiB7QXJyYXl9IGxheWVyc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGxheWVycz17fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBsYXllcnM6IHt9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGFsbCBtYXAgaWRzIGluc2lkZSBhbiBvYmplY3RcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBtYXBzPXt9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG1hcHM6IHt9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGFsbCBtYXAgY29uZmlnIG9iamVjdHMgd2hpY2ggYXJyaXZlZCBiZWZvcmUgdGhlIG1hcCBsaWIgc2NyaXB0cyBnb3QgbG9hZGVkXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdFtdfSBtYXBzVG9DcmVhdGU9W11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbWFwc1RvQ3JlYXRlOiBbXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW90ZSBtZXRob2QgYWNjZXNzIGZvciBvdGhlciB3b3JrZXJzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gcmVtb3RlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgYXBwOiBbXG4gICAgICAgICAgICAgICAgJ2FkZExheWVycycsXG4gICAgICAgICAgICAgICAgJ2FkZFNvdXJjZXMnLFxuICAgICAgICAgICAgICAgICdhdXRvUmVzaXplJyxcbiAgICAgICAgICAgICAgICAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAnY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAnZGVzdHJveScsXG4gICAgICAgICAgICAgICAgJ3NldEZpbHRlcicsXG4gICAgICAgICAgICAgICAgJ3NldExheW91dFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAnc2V0UGFpbnRQcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgJ3NldFN0eWxlJyxcbiAgICAgICAgICAgICAgICAndXBkYXRlRGF0YScsXG4gICAgICAgICAgICAgICAgJ3pvb20nXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzY3JpcHRzTG9hZGVkXz10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNjcmlwdHNMb2FkZWRfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBhbGwgbWFwIHNvdXJjZXMgaW5zaWRlIGFuIG9iamVjdC5cbiAgICAgICAgICoga2V5ID0+IG1hcCBpZCwgdmFsdWUgPT4ge0FycmF5fSBzb3VyY2VzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gc291cmNlcz17fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzb3VyY2VzOiB7fSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBhbGwgbWFwIHN0eWxlIG9iamVjdHMgaW5zaWRlIGFuIG9iamVjdHMgdG8gcHJldmVudCByZWxvYWRzIHdoZW4gc3dpdGNoaW5nIHRoZW1lcyBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAgICoga2V5ID0+IHN0eWxlIG5hbWUgKHVybClcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBzdHlsZU1hcD17fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzdHlsZU1hcDoge30sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHZlcnNpb249J3YxLjkuMSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdmVyc2lvbjogJ3YxLjkuMScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgYWxsIG1hcCB6b29tIHZhbHVlcyBpbnNpZGUgYW4gb2JqZWN0IHVudGlsIG1vdW50aW5nLiBrZXkgPT4gbWFwIGlkXG4gICAgICAgICAqIE5vIGFycmF5IHNpbmNlIGluIGNhc2UgYSBtYXAgZ2V0cyB6b29tZWQgbXVsdGlwbGUgdGltZXMsIHdlIG9ubHkgd2FudCB0byBhcHBseSB0aGUgbGFzdCB2YWx1ZSBvbiBtb3VudC5cbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSB6b29tTWFwPXt9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHpvb21NYXA6IHt9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuaW5zZXJ0TWFwYm94R0xTY3JpcHRzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gZGF0YS5sYXllcnNcbiAgICAgKi9cbiAgICBhZGRMYXllcnMoZGF0YSkge1xuICAgICAgICBsZXQgbWUgID0gdGhpcyxcbiAgICAgICAgICAgIG1hcCA9IG1lLm1hcHNbZGF0YS5pZF0sXG4gICAgICAgICAgICBiZWZvcmVJZDtcblxuICAgICAgICBpZiAobWFwKSB7XG4gICAgICAgICAgICBkYXRhLmxheWVycy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGJlZm9yZUlkID0gaXRlbS5iZWZvcmVJZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgaXRlbS5iZWZvcmVJZDtcblxuICAgICAgICAgICAgICAgIG1hcC5hZGRMYXllcihpdGVtLCBiZWZvcmVJZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZS5sYXllcnNbZGF0YS5pZF0gPSBPYmplY3QuYXNzaWduKG1lLmxheWVyc1tkYXRhLmlkXSB8fCB7fSwgZGF0YSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBkYXRhLnNvdXJjZXNcbiAgICAgKi9cbiAgICBhZGRTb3VyY2VzKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICA9IHRoaXMsXG4gICAgICAgICAgICBtYXAgPSBtZS5tYXBzW2RhdGEuaWRdLFxuICAgICAgICAgICAgaWQ7XG5cbiAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgZGF0YS5zb3VyY2VzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgaWQgPSBpdGVtLmlkO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpdGVtLmlkO1xuXG4gICAgICAgICAgICAgICAgbWFwLmFkZFNvdXJjZShpZCwgaXRlbSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZS5zb3VyY2VzW2RhdGEuaWRdID0gT2JqZWN0LmFzc2lnbihtZS5zb3VyY2VzW2RhdGEuaWRdIHx8IHt9LCBkYXRhKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzY3JpcHRzTG9hZGVkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U2NyaXB0c0xvYWRlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICBtZS5tYXBzVG9DcmVhdGUuZm9yRWFjaChjb25maWcgPT4ge1xuICAgICAgICAgICAgICAgIG1lLmNyZWF0ZShjb25maWcpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLm1hcHNUb0NyZWF0ZSA9IFtdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlSnNvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZV1cbiAgICAgKi9cbiAgICBhcHBseVN0eWxlT2JqZWN0KG1hcCwgc3R5bGVKc29uLCBuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlTWFwW25hbWVdID0gc3R5bGVKc29uXG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZUpzb24ubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMobGF5ZXIucGFpbnQpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIG1hcC5zZXRQYWludFByb3BlcnR5KGxheWVyLmlkLCBrZXksIHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3VudGluZyBhIG1hcCBpbnRvIGFuIGluYWN0aXZlIHRhYiBhbmQgYWN0aXZhdGluZyBpdCBzaG91bGQgY2FsbCB0aGlzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqL1xuICAgIGF1dG9SZXNpemUoZGF0YSkge1xuICAgICAgICBsZXQgbWFwID0gdGhpcy5tYXBzW2RhdGEuaWRdO1xuXG4gICAgICAgIG1hcCAmJiB0aGlzLnRpbWVvdXQoMTAwKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIG1hcC5yZXNpemUoKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbZGF0YS5hbmltYXRlPWZhbHNlXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEubGF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEubG5nXG4gICAgICovXG4gICAgY2VudGVyKGRhdGEpIHtcbiAgICAgICAgbGV0IG1hcCAgICA9IHRoaXMubWFwc1tkYXRhLmlkXSxcbiAgICAgICAgICAgIGNlbnRlciA9IHtsYXQ6IGRhdGEubGF0LCBsbmc6IGRhdGEubG5nfTtcblxuICAgICAgICBpZiAobWFwKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5hbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgbWFwLmZseVRvKHtjZW50ZXJ9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBkYXRhLmFjY2Vzc1Rva2VuXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgZGF0YS5jZW50ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICBbZGF0YS5kYXRhXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIFtkYXRhLmRhdGFTb3VyY2VJZF1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBkYXRhLmlkXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gW2RhdGEubGF5ZXJzXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIGRhdGEubWFwYm94U3R5bGVcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBbZGF0YS5zb3VyY2VzXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIGRhdGEuem9vbVxuICAgICAqL1xuICAgIGNyZWF0ZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFtZS5zY3JpcHRzTG9hZGVkKSB7XG4gICAgICAgICAgICBtZS5tYXBzVG9DcmVhdGUucHVzaChkYXRhKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFwYm94Z2wuYWNjZXNzVG9rZW4gPSBkYXRhLmFjY2Vzc1Rva2VuO1xuXG4gICAgICAgICAgICBsZXQgem9vbSA9IGRhdGEuem9vbTtcblxuICAgICAgICAgICAgaWYgKG1lLnpvb21NYXBbZGF0YS5pZF0pIHtcbiAgICAgICAgICAgICAgICB6b29tID0gbWUuem9vbU1hcFtkYXRhLmlkXS56b29tO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZS56b29tTWFwW2RhdGEuaWRdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLm1hcHNbZGF0YS5pZF0gPSBuZXcgbWFwYm94Z2wuTWFwKHtcbiAgICAgICAgICAgICAgICBjZW50ZXIgICA6IGRhdGEuY2VudGVyLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdHlsZSAgICA6IGRhdGEubWFwYm94U3R5bGUsXG4gICAgICAgICAgICAgICAgem9vbSAgICAgOiB6b29tXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWUubWFwc1tkYXRhLmlkXS5vbignbG9hZCcsIG1lLm9uTWFwTG9hZGVkLmJpbmQobWUsIGRhdGEpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqL1xuICAgIGRlc3Ryb3koZGF0YSkge1xuICAgICAgICB0aGlzLm1hcHNbZGF0YS5pZF0ucmVtb3ZlKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm1hcHNbZGF0YS5pZF1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNNYXAoaWQpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5tYXBzW2lkXVxuICAgIH1cblxuICAgIGluc2VydE1hcGJveEdMU2NyaXB0cygpIHtcbiAgICAgICAgbGV0IG1lICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGJhc2VQYXRoID0gbWUuZG93bmxvYWRQYXRoICsgbWUudmVyc2lvbiArICcvJztcblxuICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBEb21BY2Nlc3MubG9hZFNjcmlwdCggICAgYmFzZVBhdGggKyAnbWFwYm94LWdsLmpzJyksXG4gICAgICAgICAgICBEb21BY2Nlc3MubG9hZFN0eWxlc2hlZXQoYmFzZVBhdGggKyAnbWFwYm94LWdsLmNzcycpXG4gICAgICAgIF0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbWUuc2NyaXB0c0xvYWRlZCA9IHRydWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC50YXJnZXQgbWFwIGluc3RhbmNlXG4gICAgICovXG4gICAgb25NYXBMb2FkZWQoZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgbGV0IG1lICAgID0gdGhpcyxcbiAgICAgICAgICAgIG1hcElkID0gZGF0YS5pZDtcblxuICAgICAgICBpZiAoZGF0YS5zb3VyY2VzKSB7XG4gICAgICAgICAgICBtZS5hZGRTb3VyY2VzKHtcbiAgICAgICAgICAgICAgICBpZCAgICAgOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgIHNvdXJjZXM6IGRhdGEuc291cmNlc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChtZS5zb3VyY2VzW21hcElkXSkge1xuICAgICAgICAgICAgbWUuYWRkU291cmNlcyhtZS5zb3VyY2VzW21hcElkXSk7XG4gICAgICAgICAgICBkZWxldGUgbWUuc291cmNlc1ttYXBJZF1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLmxheWVycykge1xuICAgICAgICAgICAgbWUuYWRkTGF5ZXJzKHtcbiAgICAgICAgICAgICAgICBpZCAgICA6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBkYXRhLmxheWVyc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChtZS5sYXllcnNbbWFwSWRdKSB7XG4gICAgICAgICAgICBtZS5hZGRMYXllcnMobWUubGF5ZXJzW21hcElkXSk7XG4gICAgICAgICAgICBkZWxldGUgbWUubGF5ZXJzW21hcElkXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFwLmxvYWRlZCgpIGlzIGZhbHNlIGF0IHRoaXMgcG9pbnQsXG4gICAgICAgIC8vIGluIGNhc2Ugd2UgZG8gYWRkIGxheWVycyAvIHNvdXJjZXNcbiAgICAgICAgLy8gdGhlIFwiaWRsZVwiIGV2ZW50IHNlZW1zIHRvIGJlIHRoZSBiZXN0IGZpdFxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmxvYWRlZCgpKSB7XG4gICAgICAgICAgICBtZS5vbk1hcFJlYWxseUxvYWRlZChkYXRhLCBldmVudClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5vbmNlKCdpZGxlJywgbWUub25NYXBSZWFsbHlMb2FkZWQuYmluZChtZSwgZGF0YSkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC50YXJnZXQgbWFwIGluc3RhbmNlXG4gICAgICovXG4gICAgb25NYXBSZWFsbHlMb2FkZWQoZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS50aW1lb3V0KDEwMCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgbWUudXBkYXRlRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgICAgICAgIDogZGF0YS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBkYXRhU291cmNlSWQ6IGRhdGEuZGF0YVNvdXJjZUlkLFxuICAgICAgICAgICAgICAgICAgICBpZCAgICAgICAgICA6IGRhdGEuaWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZS5kYXRhTWFwW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICAgICAgbWUudXBkYXRlRGF0YShtZS5kYXRhTWFwW2RhdGEuaWRdKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9hcGkvI21hcCNzZXRmaWx0ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEubGF5ZXJJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhLm9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRhdGEub3B0aW9ucy52YWxpZGF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEudmFsdWVcbiAgICAgKi9cbiAgICBzZXRGaWx0ZXIoZGF0YSkge1xuICAgICAgICBsZXQgbWFwID0gdGhpcy5tYXBzW2RhdGEuaWRdO1xuXG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgIG1hcC5zZXRGaWx0ZXIoZGF0YS5sYXllcklkLCBkYXRhLnZhbHVlLCBkYXRhLm9wdGlvbnMgfHwge30pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0b2RvOiB3ZSBjb3VsZCBjYWNoZSB0aGlzIGFuZCBhcHBseSBvbk1hcExvYWRlZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2FwaS8jbWFwI3NldGxheW91dHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmxheWVySWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5rZXlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YS5vcHRpb25zXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkYXRhLm9wdGlvbnMudmFsaWRhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS52YWx1ZVxuICAgICAqL1xuICAgIHNldExheW91dFByb3BlcnR5KGRhdGEpIHtcbiAgICAgICAgbGV0IG1hcCA9IHRoaXMubWFwc1tkYXRhLmlkXTtcblxuICAgICAgICBpZiAobWFwKSB7XG4gICAgICAgICAgICBtYXAuc2V0TGF5b3V0UHJvcGVydHkoZGF0YS5sYXllcklkLCBkYXRhLmtleSwgZGF0YS52YWx1ZSwgZGF0YS5vcHRpb25zIHx8IHt9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdG9kbzogd2UgY291bGQgY2FjaGUgdGhpcyBhbmQgYXBwbHkgb25NYXBMb2FkZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9hcGkvI21hcCNzZXRwYWludHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmxheWVySWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5rZXlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YS5vcHRpb25zXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkYXRhLm9wdGlvbnMudmFsaWRhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS52YWx1ZVxuICAgICAqL1xuICAgIHNldFBhaW50UHJvcGVydHkoZGF0YSkge1xuICAgICAgICBsZXQgbWFwID0gdGhpcy5tYXBzW2RhdGEuaWRdO1xuXG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgIG1hcC5zZXRQYWludFByb3BlcnR5KGRhdGEubGF5ZXJJZCwgZGF0YS5rZXksIGRhdGEudmFsdWUsIGRhdGEub3B0aW9ucyB8fCB7fSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRvZG86IHdlIGNvdWxkIGNhY2hlIHRoaXMgYW5kIGFwcGx5IG9uTWFwTG9hZGVkXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmFjY2Vzc1Rva2VuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEuc3R5bGVcbiAgICAgKi9cbiAgICBzZXRTdHlsZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFtZS5zY3JpcHRzTG9hZGVkIHx8ICFtZS5oYXNNYXAoZGF0YS5pZCkpIHtcbiAgICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChOZW8uaXNTdHJpbmcoZGF0YS5zdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdHlsZS5pbmRleE9mKCdtYXBib3g6Ly9zdHlsZXMvJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdHlsZSA9IGRhdGEuc3R5bGUuc3Vic3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtZS5zdHlsZU1hcFtkYXRhLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5hcHBseVN0eWxlT2JqZWN0KG1lLm1hcHNbZGF0YS5pZF0sIG1lLnN0eWxlTWFwW2RhdGEuc3R5bGVdKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZldGNoKGBodHRwczovL2FwaS5tYXBib3guY29tL3N0eWxlcy92MS8ke2RhdGEuc3R5bGV9P2FjY2Vzc190b2tlbj0ke2RhdGEuYWNjZXNzVG9rZW59YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHN0eWxlSnNvbiA9PiBtZS5hcHBseVN0eWxlT2JqZWN0KG1lLm1hcHNbZGF0YS5pZF0sIHN0eWxlSnNvbiwgZGF0YS5zdHlsZSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYXAuc2V0U3R5bGUgYnJlYWtzIHdpdGggb25seSBhIGNvbnNvbGUud2FybigpXG4gICAgICAgICAgICAvLyA9PiBjYXVzaW5nIGEgZnVsbCByZXBhaW50LCBsb3NpbmcgY3VzdG9tIHNvdXJjZXMgJiBsYXllcnNcbiAgICAgICAgICAgIC8vIG1hcC5zZXRTdHlsZShkYXRhLnN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEuZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmRhdGFTb3VyY2VJZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICovXG4gICAgdXBkYXRlRGF0YShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFtZS5zY3JpcHRzTG9hZGVkIHx8ICFtZS5oYXNNYXAoZGF0YS5pZCkpIHtcbiAgICAgICAgICAgIG1lLmRhdGFNYXBbZGF0YS5pZF0gPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1hcCAgICA9IG1lLm1hcHNbZGF0YS5pZF0sXG4gICAgICAgICAgICAgICAgc291cmNlID0gbWFwLmdldFNvdXJjZShkYXRhLmRhdGFTb3VyY2VJZCk7XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2Uuc2V0RGF0YShkYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZS5kYXRhTWFwW2RhdGEuaWRdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lLmRhdGFNYXBbZGF0YS5pZF0gPSBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEuem9vbVxuICAgICAqL1xuICAgIHpvb20oZGF0YSkge1xuICAgICAgICBsZXQgbWFwID0gdGhpcy5tYXBzW2RhdGEuaWRdO1xuXG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgIG1hcC5zZXRab29tKGRhdGEuem9vbSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuem9vbU1hcFtkYXRhLmlkXSA9IGRhdGFcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoTWFwYm94R0wpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
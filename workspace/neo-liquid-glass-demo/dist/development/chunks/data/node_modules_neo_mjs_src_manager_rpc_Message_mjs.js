"use strict";
(self["webpackChunkmyapp"] = self["webpackChunkmyapp"] || []).push([["node_modules_neo_mjs_src_manager_rpc_Message_mjs"],{

/***/ "./node_modules/neo.mjs/src/manager/rpc/Message.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/neo.mjs/src/manager/rpc/Message.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Base.mjs */ "./node_modules/neo.mjs/src/manager/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./node_modules/neo.mjs/src/util/Array.mjs");



/**
 * @class Neo.manager.rpc.Message
 * @extends Neo.manager.Base
 * @singleton
 */
class Message extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.manager.rpc.Message'
         * @protected
         */
        className: 'Neo.manager.rpc.Message',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true,
        /**
         * @member {Object[]} sorters
         */
        sorters: [{
            direction: 'ASC',
            property : 'id'
        }]
    }

    /**
     * Stores the urls of endpoints for which a setTimeout() call is in progress
     * @member {String[]} endPointTimeouts=[]
     */
    endPointTimeouts = []
    /**
     * internal incrementing flag
     * @member {Number} messageId=1
     * @protected
     */
    messageId = 1
    /**
     * Time window in ms for buffering incoming message requests
     * @member {Number} requestBuffer=20
     */
    requestBuffer = 20
    /**
     * @member {Object} socketConnections={}
     */
    socketConnections = {}
    /**
     * internal incrementing flag
     * @member {Number} transactionId=1
     * @protected
     */
    transactionId = 1

    /**
     *
     * @param {Object} msg
     * @returns {Promise<any>}
     */
    onMessage(msg) {
        let api = Neo.manager.rpc.Api.get(`${msg.service}.${msg.method}`);

        return this[`onMessage${Neo.capitalize(api.type)}`](msg, api);
    }

    /**
     *
     * @param {Object} msg
     * @param {Object} api
     * @protected
     * @returns {Promise<any>}
     */
    onMessageAjax(msg, api) {
        return new Promise((resolve, reject) => {
            let me    = this,
                {url} = api;

            me.register({
                id           : me.messageId,
                method       : msg.method,
                params       : msg.params,
                reject,
                resolve,
                service      : msg.service,
                transactionId: 0,
                url
            });

            me.messageId++;

            if (!me.endPointTimeouts.includes(url)) {
                me.endPointTimeouts.push(url);

                me.timeout(me.requestBuffer).then(() => {
                    me.resolveBufferTimeout(url)
                })
            }
        })
    }

    /**
     *
     * @param {Object} msg
     * @param {Object} api
     * @protected
     * @returns {Promise<any>}
     */
    async onMessageWebsocket(msg, api) {
        let me         = this,
            {url}      = api,
            connection = me.socketConnections[url];

        if (!connection) {
            let module = await __webpack_require__.e(/*! import() */ "node_modules_neo_mjs_src_data_connection_WebSocket_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ../../data/connection/WebSocket.mjs */ "./node_modules/neo.mjs/src/data/connection/WebSocket.mjs"));

            me.socketConnections[url] = connection = Neo.create(module.default, {serverAddress: url})
        }

        return await connection.promiseMessage(msg)
    }

    /**
     * @param {String} url
     */
    async resolveBufferTimeout(url) {
        let me              = this,
            itemIds         = [],
            processItems    = me.find({transactionId: 0, url}),
            requests        = [],
            {transactionId} = me,
            response;

        processItems.forEach(item => {
            item.transactionId = transactionId;

            itemIds.push(item.id);

            requests.push({
                id     : item.id,
                method : item.method,
                params : item.params,
                service: item.service
            })
        });

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(me.endPointTimeouts, url);

        me.transactionId++;

        response = await Neo.Fetch.request(url, {}, 'post', JSON.stringify({tid: transactionId, requests}));

        processItems.forEach(item => {
            // todo: pass the item which is included inside the response object
            // todo: reject the Promise in case the item is missing

            item.resolve()
        });

        // todo: remove only the items which are included inside the response
        me.remove(itemIds)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Message));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2RhdGEvbm9kZV9tb2R1bGVzX25lb19tanNfc3JjX21hbmFnZXJfcnBjX01lc3NhZ2VfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNTOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlEQUFJO0FBQzFCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWSxHQUFHLFdBQVc7O0FBRXZFLGdDQUFnQyx5QkFBeUI7QUFDekQ7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsS0FBSzs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCOztBQUVBO0FBQ0EsK0JBQStCLDBQQUE2Qzs7QUFFNUUsaUZBQWlGLG1CQUFtQjtBQUNwRzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNCQUFzQjtBQUM3RDtBQUNBLGFBQWEsZUFBZTtBQUM1Qjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUzs7QUFFVCxRQUFRLHVEQUFROztBQUVoQjs7QUFFQSxrREFBa0QsMEJBQTBCLDZCQUE2Qjs7QUFFekc7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL25lby5tanMvc3JjL21hbmFnZXIvcnBjL01lc3NhZ2UubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlICAgICBmcm9tICcuLi9CYXNlLm1qcyc7XG5pbXBvcnQgTmVvQXJyYXkgZnJvbSAnLi4vLi4vdXRpbC9BcnJheS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8ubWFuYWdlci5ycGMuTWVzc2FnZVxuICogQGV4dGVuZHMgTmVvLm1hbmFnZXIuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBNZXNzYWdlIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFuYWdlci5ycGMuTWVzc2FnZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1hbmFnZXIucnBjLk1lc3NhZ2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gc2luZ2xldG9uPXRydWVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgc2luZ2xldG9uOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0W119IHNvcnRlcnNcbiAgICAgICAgICovXG4gICAgICAgIHNvcnRlcnM6IFt7XG4gICAgICAgICAgICBkaXJlY3Rpb246ICdBU0MnLFxuICAgICAgICAgICAgcHJvcGVydHkgOiAnaWQnXG4gICAgICAgIH1dXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSB1cmxzIG9mIGVuZHBvaW50cyBmb3Igd2hpY2ggYSBzZXRUaW1lb3V0KCkgY2FsbCBpcyBpbiBwcm9ncmVzc1xuICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBlbmRQb2ludFRpbWVvdXRzPVtdXG4gICAgICovXG4gICAgZW5kUG9pbnRUaW1lb3V0cyA9IFtdXG4gICAgLyoqXG4gICAgICogaW50ZXJuYWwgaW5jcmVtZW50aW5nIGZsYWdcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IG1lc3NhZ2VJZD0xXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1lc3NhZ2VJZCA9IDFcbiAgICAvKipcbiAgICAgKiBUaW1lIHdpbmRvdyBpbiBtcyBmb3IgYnVmZmVyaW5nIGluY29taW5nIG1lc3NhZ2UgcmVxdWVzdHNcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHJlcXVlc3RCdWZmZXI9MjBcbiAgICAgKi9cbiAgICByZXF1ZXN0QnVmZmVyID0gMjBcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHNvY2tldENvbm5lY3Rpb25zPXt9XG4gICAgICovXG4gICAgc29ja2V0Q29ubmVjdGlvbnMgPSB7fVxuICAgIC8qKlxuICAgICAqIGludGVybmFsIGluY3JlbWVudGluZyBmbGFnXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSB0cmFuc2FjdGlvbklkPTFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdHJhbnNhY3Rpb25JZCA9IDFcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1zZ1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgb25NZXNzYWdlKG1zZykge1xuICAgICAgICBsZXQgYXBpID0gTmVvLm1hbmFnZXIucnBjLkFwaS5nZXQoYCR7bXNnLnNlcnZpY2V9LiR7bXNnLm1ldGhvZH1gKTtcblxuICAgICAgICByZXR1cm4gdGhpc1tgb25NZXNzYWdlJHtOZW8uY2FwaXRhbGl6ZShhcGkudHlwZSl9YF0obXNnLCBhcGkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1zZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhcGlcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBvbk1lc3NhZ2VBamF4KG1zZywgYXBpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHt1cmx9ID0gYXBpO1xuXG4gICAgICAgICAgICBtZS5yZWdpc3Rlcih7XG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgIDogbWUubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgIG1ldGhvZCAgICAgICA6IG1zZy5tZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zICAgICAgIDogbXNnLnBhcmFtcyxcbiAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlICAgICAgOiBtc2cuc2VydmljZSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbklkOiAwLFxuICAgICAgICAgICAgICAgIHVybFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLm1lc3NhZ2VJZCsrO1xuXG4gICAgICAgICAgICBpZiAoIW1lLmVuZFBvaW50VGltZW91dHMuaW5jbHVkZXModXJsKSkge1xuICAgICAgICAgICAgICAgIG1lLmVuZFBvaW50VGltZW91dHMucHVzaCh1cmwpO1xuXG4gICAgICAgICAgICAgICAgbWUudGltZW91dChtZS5yZXF1ZXN0QnVmZmVyKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWUucmVzb2x2ZUJ1ZmZlclRpbWVvdXQodXJsKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbXNnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFwaVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGFzeW5jIG9uTWVzc2FnZVdlYnNvY2tldChtc2csIGFwaSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7dXJsfSAgICAgID0gYXBpLFxuICAgICAgICAgICAgY29ubmVjdGlvbiA9IG1lLnNvY2tldENvbm5lY3Rpb25zW3VybF07XG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgbW9kdWxlID0gYXdhaXQgaW1wb3J0KCcuLi8uLi9kYXRhL2Nvbm5lY3Rpb24vV2ViU29ja2V0Lm1qcycpO1xuXG4gICAgICAgICAgICBtZS5zb2NrZXRDb25uZWN0aW9uc1t1cmxdID0gY29ubmVjdGlvbiA9IE5lby5jcmVhdGUobW9kdWxlLmRlZmF1bHQsIHtzZXJ2ZXJBZGRyZXNzOiB1cmx9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGNvbm5lY3Rpb24ucHJvbWlzZU1lc3NhZ2UobXNnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICAgKi9cbiAgICBhc3luYyByZXNvbHZlQnVmZmVyVGltZW91dCh1cmwpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBpdGVtSWRzICAgICAgICAgPSBbXSxcbiAgICAgICAgICAgIHByb2Nlc3NJdGVtcyAgICA9IG1lLmZpbmQoe3RyYW5zYWN0aW9uSWQ6IDAsIHVybH0pLFxuICAgICAgICAgICAgcmVxdWVzdHMgICAgICAgID0gW10sXG4gICAgICAgICAgICB7dHJhbnNhY3Rpb25JZH0gPSBtZSxcbiAgICAgICAgICAgIHJlc3BvbnNlO1xuXG4gICAgICAgIHByb2Nlc3NJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaXRlbS50cmFuc2FjdGlvbklkID0gdHJhbnNhY3Rpb25JZDtcblxuICAgICAgICAgICAgaXRlbUlkcy5wdXNoKGl0ZW0uaWQpO1xuXG4gICAgICAgICAgICByZXF1ZXN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZCAgICAgOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgIG1ldGhvZCA6IGl0ZW0ubWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtcyA6IGl0ZW0ucGFyYW1zLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IGl0ZW0uc2VydmljZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTmVvQXJyYXkucmVtb3ZlKG1lLmVuZFBvaW50VGltZW91dHMsIHVybCk7XG5cbiAgICAgICAgbWUudHJhbnNhY3Rpb25JZCsrO1xuXG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgTmVvLkZldGNoLnJlcXVlc3QodXJsLCB7fSwgJ3Bvc3QnLCBKU09OLnN0cmluZ2lmeSh7dGlkOiB0cmFuc2FjdGlvbklkLCByZXF1ZXN0c30pKTtcblxuICAgICAgICBwcm9jZXNzSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIC8vIHRvZG86IHBhc3MgdGhlIGl0ZW0gd2hpY2ggaXMgaW5jbHVkZWQgaW5zaWRlIHRoZSByZXNwb25zZSBvYmplY3RcbiAgICAgICAgICAgIC8vIHRvZG86IHJlamVjdCB0aGUgUHJvbWlzZSBpbiBjYXNlIHRoZSBpdGVtIGlzIG1pc3NpbmdcblxuICAgICAgICAgICAgaXRlbS5yZXNvbHZlKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdG9kbzogcmVtb3ZlIG9ubHkgdGhlIGl0ZW1zIHdoaWNoIGFyZSBpbmNsdWRlZCBpbnNpZGUgdGhlIHJlc3BvbnNlXG4gICAgICAgIG1lLnJlbW92ZShpdGVtSWRzKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoTWVzc2FnZSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
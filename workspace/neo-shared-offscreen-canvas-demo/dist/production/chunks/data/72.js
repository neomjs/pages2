"use strict";(self.webpackChunkmainapp=self.webpackChunkmainapp||[]).push([[72],{72:(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s(74);class c extends n.Z{static getConfig(){return{className:"Neo.util.Function"}}static bindAppend(e){const t=this,s=[].slice.call(arguments).slice(1);return function(){return t.apply(e,[].slice.call(arguments).concat(s))}}static createInterceptor(e,t,s,n){let c=e[t];return e[t]=function(t){return c.call(e,s.call(n||e,t))}}static createSequence(e,t,s,n){let c=e[t]||Neo.emptyFn;return e[t]=function(){return c.apply(this,arguments),s.apply(n||this,arguments)}}static intercept(e,t,s,n,c=null){let o=e[t];return e[t]=function(){return!1===s.apply(n||e,arguments)?c:o.apply(e,arguments)}}}Neo.applyClassConfig(c);const o=c;s(622);class a extends n.Z{channel=null;maxReconnectAttempts=5;messageCallbacks={};messageId=1;reconnectAttempts=0;serverAddress=null;static getStaticConfig(){return{observable:!0}}static getConfig(){return{className:"Neo.data.connection.WebSocket",ntype:"socket-connection",socket_:null}}construct(e){super.construct(e),this.createSocket()}attemptReconnect(e,t){let s=this;s.reconnectAttempts++,s.reconnectAttempts<s.maxReconnectAttempts&&(s.createSocket(),e&&s.on("open",{callback:e,scope:t||s,single:!0}))}beforeSend(e){let t=this.channel;return console.log("WS: Sending message",t?"\nChannel: "+t:"","\nData:",e),JSON.stringify(t?{channel:t,data:e}:e)}beforeSetSocket(e,t){if(e){let t=this;Object.assign(e,{onclose:t.onClose.bind(t),onerror:t.onError.bind(t),onmessage:t.onMessage.bind(t),onopen:t.onOpen.bind(t)}),o.createInterceptor(e,"send",t.beforeSend,t)}return e}close(e,t){this.socket.close(e,t)}createSocket(){this.socket=new WebSocket(this.serverAddress)}destroy(...e){this.close(),super.destroy(...e)}onClose(e,t,s){console.log("onClose",e,t,s)}onError(){console.log("onError",arguments)}onMessage(e){let t=JSON.parse(e.data);console.log("onMessage",t),t.mId&&(this.messageCallbacks[t.mId].resolve(t.data),delete this.messageCallbacks[t.mId])}onOpen(){this.fire("open",{scope:this})}promiseMessage(e){let t=this;return new Promise(((s,n)=>{t.messageCallbacks[t.messageId]={reject:n,resolve:s},t.sendMessage({data:e,mId:t.messageId}),t.messageId++}))}sendMessage(e){let t=this,s=t.socket,n=e;switch(s.readyState){case WebSocket.CLOSED:case WebSocket.CLOSING:t.attemptReconnect((function(){t.sendMessage(n)}));break;case WebSocket.CONNECTING:t.on("open",(function(){t.sendMessage(n)}),t,{single:!0});break;case WebSocket.OPEN:s.send(e)}}}Neo.applyClassConfig(a);const r=a}}]);
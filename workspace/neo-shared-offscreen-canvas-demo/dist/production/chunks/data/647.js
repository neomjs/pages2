"use strict";(self.webpackChunkmainapp=self.webpackChunkmainapp||[]).push([[647],{647:(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var r=s(767),i=s(74);class a extends i.Z{static getConfig(){return{className:"Neo.util.Array"}}static add(e,t){Array.isArray(t)||(t=[t]),t.forEach((t=>{e.includes(t)||e.push(t)}))}static difference(e=[],t=[]){return e.filter((e=>!t.includes(e)))}static hasItem(e,t){return e.includes(t)}static intersection(e=[],t=[]){return e.filter((e=>t.includes(e)))}static move(e,t,s){return t===s||(t>=e.length&&(t=e.length-1),e.splice(s,0,e.splice(t,1)[0])),e}static remove(e,t){let s;Array.isArray(t)||(t=[t]),t.forEach((t=>{s=e.indexOf(t),s>-1&&e.splice(s,1)}))}static removeAdd(e,t,s){this.remove(e,t),this.add(e,s)}static toggle(e,t){this[this.hasItem(e,t)?"remove":"add"](e,t)}static union(e,t){let s,r=[],i=e.concat(t),a=i.length,n={};for(;a--;)s=i[a],n[s]||(r.unshift(s),n[s]=!0);return r}static unshift(e,t){Array.isArray(t)||(t=[t]),t.forEach((t=>{e.includes(t)||e.unshift(t)}))}}Neo.applyClassConfig(a);const n=a;class o extends r.Z{endPointTimeouts=[];messageId=1;requestBuffer=20;socketConnections={};transactionId=1;static getConfig(){return{className:"Neo.manager.rpc.Message",singleton:!0,sorters:[{direction:"ASC",property:"id"}]}}onMessage(e){let t=Neo.manager.rpc.Api.get(`${e.service}.${e.method}`);return this[`onMessage${Neo.capitalize(t.type)}`](e,t)}onMessageAjax(e,t){return new Promise(((s,r)=>{let i=this,a=t.url;i.register({id:i.messageId,method:e.method,params:e.params,reject:r,resolve:s,service:e.service,transactionId:0,url:a}),i.messageId++,i.endPointTimeouts.includes(a)||(i.endPointTimeouts.push(a),setTimeout((()=>{i.resolveBufferTimeout(a)}),i.requestBuffer))}))}async onMessageWebsocket(e,t){let r=this,i=t.url,a=r.socketConnections[i];if(!a){let e=await s.e(72).then(s.bind(s,72));r.socketConnections[i]=a=Neo.create(e.default,{serverAddress:i})}return await a.promiseMessage(e)}async resolveBufferTimeout(e){let t,s=this,r=[],i=s.find({transactionId:0,url:e}),a=[],o=s.transactionId;i.forEach((e=>{e.transactionId=o,r.push(e.id),a.push({id:e.id,method:e.method,params:e.params,service:e.service})})),n.remove(s.endPointTimeouts,e),s.transactionId++,t=await Neo.Fetch.request(e,{},"post",JSON.stringify({tid:o,requests:a})),i.forEach((e=>{e.resolve()})),s.remove(r)}}Neo.applyClassConfig(o);let c=Neo.create(o);Neo.applyToGlobalNs(c);const d=c}}]);
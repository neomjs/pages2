"use strict";
(self["webpackChunkmainapp"] = self["webpackChunkmainapp"] || []).push([["node_modules_neo_mjs_src_remotes_Api_mjs"],{

/***/ "./node_modules/neo.mjs/src/remotes/Api.mjs":
/*!**************************************************!*\
  !*** ./node_modules/neo.mjs/src/remotes/Api.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * @class Neo.remotes.Api
 * @extends Neo.core.Base
 * @singleton
 */
class Api extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.remotes.Api'
         * @protected
         */
        className: 'Neo.remotes.Api',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     * @param {String} service
     * @param {String} method
     * @returns {function(*=, *=): Promise<any>}
     */
    generateRemote(service, method) {
        return function(...args) {
            return Neo.currentWorker.promiseMessage('data', {
                action: 'rpc',
                method,
                params: [...args],
                service
            })
        }
    }

    /**
     *
     */
    load() {
        let config = Neo.config,
            path   = config.remotesApiUrl;

        // relative paths need a special treatment
        if (!path.includes('http')) {
            path = config.appPath.split('/');
            path.pop();
            path = `../../${path.join('/')}/${config.remotesApiUrl}`;
        }

        fetch(path)
            .then(response => response.json())
            .then(data => {
                Neo.currentWorker.sendMessage('data', {action: 'registerApi', data});
                this.register(data)
            })
    }

    /**
     * @param {Object} api
     */
    register(api) {
        let ns;

        Object.entries(api.services).forEach(([service, serviceValue]) => {
            ns = Neo.ns(`${api.namespace}.${service}`, true);

            Object.entries(serviceValue.methods).forEach(([method, methodValue]) => {
                ns[method] = this.generateRemote(service, method);
            })
        })
    }
}

Neo.applyClassConfig(Api);

let instance = Neo.create(Api);

Neo.applyToGlobalNs(instance);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC9ub2RlX21vZHVsZXNfbmVvX21qc19zcmNfcmVtb3Rlc19BcGlfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFJO0FBQ3RCLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGVBQWUsR0FBRyxxQkFBcUI7QUFDbkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdURBQXVELDRCQUE0QjtBQUNuRjtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsY0FBYyxHQUFHLFFBQVE7O0FBRXBEO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFpbmFwcC8uL25vZGVfbW9kdWxlcy9uZW8ubWpzL3NyYy9yZW1vdGVzL0FwaS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5yZW1vdGVzLkFwaVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBBcGkgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLnJlbW90ZXMuQXBpJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ucmVtb3Rlcy5BcGknLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gc2luZ2xldG9uPXRydWVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgc2luZ2xldG9uOiB0cnVlXG4gICAgfX1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigqPSwgKj0pOiBQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZ2VuZXJhdGVSZW1vdGUoc2VydmljZSwgbWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gTmVvLmN1cnJlbnRXb3JrZXIucHJvbWlzZU1lc3NhZ2UoJ2RhdGEnLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAncnBjJyxcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBbLi4uYXJnc10sXG4gICAgICAgICAgICAgICAgc2VydmljZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbG9hZCgpIHtcbiAgICAgICAgbGV0IGNvbmZpZyA9IE5lby5jb25maWcsXG4gICAgICAgICAgICBwYXRoICAgPSBjb25maWcucmVtb3Rlc0FwaVVybDtcblxuICAgICAgICAvLyByZWxhdGl2ZSBwYXRocyBuZWVkIGEgc3BlY2lhbCB0cmVhdG1lbnRcbiAgICAgICAgaWYgKCFwYXRoLmluY2x1ZGVzKCdodHRwJykpIHtcbiAgICAgICAgICAgIHBhdGggPSBjb25maWcuYXBwUGF0aC5zcGxpdCgnLycpO1xuICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIHBhdGggPSBgLi4vLi4vJHtwYXRoLmpvaW4oJy8nKX0vJHtjb25maWcucmVtb3Rlc0FwaVVybH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgZmV0Y2gocGF0aClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIE5lby5jdXJyZW50V29ya2VyLnNlbmRNZXNzYWdlKCdkYXRhJywge2FjdGlvbjogJ3JlZ2lzdGVyQXBpJywgZGF0YX0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFwaVxuICAgICAqL1xuICAgIHJlZ2lzdGVyKGFwaSkge1xuICAgICAgICBsZXQgbnM7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoYXBpLnNlcnZpY2VzKS5mb3JFYWNoKChbc2VydmljZSwgc2VydmljZVZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgbnMgPSBOZW8ubnMoYCR7YXBpLm5hbWVzcGFjZX0uJHtzZXJ2aWNlfWAsIHRydWUpO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzZXJ2aWNlVmFsdWUubWV0aG9kcykuZm9yRWFjaCgoW21ldGhvZCwgbWV0aG9kVmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgbnNbbWV0aG9kXSA9IHRoaXMuZ2VuZXJhdGVSZW1vdGUoc2VydmljZSwgbWV0aG9kKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhBcGkpO1xuXG5sZXQgaW5zdGFuY2UgPSBOZW8uY3JlYXRlKEFwaSk7XG5cbk5lby5hcHBseVRvR2xvYmFsTnMoaW5zdGFuY2UpO1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
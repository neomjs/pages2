"use strict";
(self["webpackChunkneo_offscreen_canvas_demo"] = self["webpackChunkneo_offscreen_canvas_demo"] || []).push([["node_modules_neo_mjs_src_main_addon_CloneNode_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/CloneNode.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/CloneNode.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * Basic helper class to create template DOM nodes and apply them to a target node via cloning.
 * See: https://github.com/neomjs/neo/blob/dev/apps/krausest/view/TableComponent.mjs
 * @class Neo.main.addon.CloneNode
 * @extends Neo.core.Base
 * @singleton
 */
class CloneNode extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.main.addon.CloneNode'
         * @protected
         */
        className: 'Neo.main.addon.CloneNode',
        /**
         * Internal map to store DOM nodes which will get used for cloning
         * @member {Object} map={}
         * @protected
         */
        map: {},
        /**
         * Remote method access for other workers
         * @member {Object} remote={app: [//...]}
         * @protected
         */
        remote: {
            app: [
                'applyClones',
                'createNode'
            ]
        },
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     *
     * @param {Object} data
     * @param {Array} data.data
     * @param {String} data.id The reference id, not DOM id
     * @param {String} data.parentId
     */
    applyClones(data) {
        let i      = 0,
            node   = this.map[data.id],
            len    = data.data.length,
            parent = document.getElementById(data.parentId),
            clone, itemData, j, path, pathLen, targetNode;

        requestAnimationFrame(() => {
            let start = performance.now();

            for (; i < len; i++) {
                clone    = node.template.cloneNode(true);
                itemData = data.data[i];

                Object.entries(itemData).forEach(([key, value]) => {
                    path = node.paths[key];

                    if (path) {
                        path       = path.split('/').map(e => Number(e));
                        j          = 0;
                        pathLen    = path.length;
                        targetNode = clone;

                        for (; j < pathLen; j++) {
                            targetNode = targetNode.childNodes[path[j]];
                        }

                        targetNode.textContent = value;
                    }
                });

                parent.append(clone);
            }

            let end = performance.now();

            console.log('time', end - start);
        });
    }

    /**
     *
     * @param {Object} data
     * @param {String} data.html
     * @param {String} data.id The reference id, not DOM id
     * @param {Object} data.paths
     * @param {String} data.tag
     */
    createNode(data) {
        let template = document.createElement(data.tag);
        template.innerHTML = data.html;

        this.map[data.id] = {
            paths   : data.paths,
            template: template
        };
    }
}

Neo.applyClassConfig(CloneNode);

let instance = Neo.create(CloneNode);

Neo.applyToGlobalNs(instance);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vbm9kZV9tb2R1bGVzX25lb19tanNfc3JjX21haW5fYWRkb25fQ2xvbmVOb2RlX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbURBQUk7QUFDNUIsd0JBQXdCO0FBQ3hCO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLG9CQUFvQixRQUFRLFFBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8tb2Zmc2NyZWVuLWNhbnZhcy1kZW1vLy4vbm9kZV9tb2R1bGVzL25lby5tanMvc3JjL21haW4vYWRkb24vQ2xvbmVOb2RlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcblxuLyoqXG4gKiBCYXNpYyBoZWxwZXIgY2xhc3MgdG8gY3JlYXRlIHRlbXBsYXRlIERPTSBub2RlcyBhbmQgYXBwbHkgdGhlbSB0byBhIHRhcmdldCBub2RlIHZpYSBjbG9uaW5nLlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbmVvbWpzL25lby9ibG9iL2Rldi9hcHBzL2tyYXVzZXN0L3ZpZXcvVGFibGVDb21wb25lbnQubWpzXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uQ2xvbmVOb2RlXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKiBAc2luZ2xldG9uXG4gKi9cbmNsYXNzIENsb25lTm9kZSBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBnZXRDb25maWcoKSB7cmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5DbG9uZU5vZGUnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5tYWluLmFkZG9uLkNsb25lTm9kZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBtYXAgdG8gc3RvcmUgRE9NIG5vZGVzIHdoaWNoIHdpbGwgZ2V0IHVzZWQgZm9yIGNsb25pbmdcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBtYXA9e31cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbWFwOiB7fSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW90ZSBtZXRob2QgYWNjZXNzIGZvciBvdGhlciB3b3JrZXJzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gcmVtb3RlPXthcHA6IFsvLy4uLl19XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgYXBwOiBbXG4gICAgICAgICAgICAgICAgJ2FwcGx5Q2xvbmVzJyxcbiAgICAgICAgICAgICAgICAnY3JlYXRlTm9kZSdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNpbmdsZXRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNpbmdsZXRvbjogdHJ1ZVxuICAgIH19XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YS5kYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWQgVGhlIHJlZmVyZW5jZSBpZCwgbm90IERPTSBpZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLnBhcmVudElkXG4gICAgICovXG4gICAgYXBwbHlDbG9uZXMoZGF0YSkge1xuICAgICAgICBsZXQgaSAgICAgID0gMCxcbiAgICAgICAgICAgIG5vZGUgICA9IHRoaXMubWFwW2RhdGEuaWRdLFxuICAgICAgICAgICAgbGVuICAgID0gZGF0YS5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEucGFyZW50SWQpLFxuICAgICAgICAgICAgY2xvbmUsIGl0ZW1EYXRhLCBqLCBwYXRoLCBwYXRoTGVuLCB0YXJnZXROb2RlO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNsb25lICAgID0gbm9kZS50ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaXRlbURhdGEgPSBkYXRhLmRhdGFbaV07XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhpdGVtRGF0YSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBub2RlLnBhdGhzW2tleV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggICAgICAgPSBwYXRoLnNwbGl0KCcvJykubWFwKGUgPT4gTnVtYmVyKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGogICAgICAgICAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aExlbiAgICA9IHBhdGgubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IGNsb25lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaiA8IHBhdGhMZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSB0YXJnZXROb2RlLmNoaWxkTm9kZXNbcGF0aFtqXV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RpbWUnLCBlbmQgLSBzdGFydCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5odG1sXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWQgVGhlIHJlZmVyZW5jZSBpZCwgbm90IERPTSBpZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhLnBhdGhzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEudGFnXG4gICAgICovXG4gICAgY3JlYXRlTm9kZShkYXRhKSB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGF0YS50YWcpO1xuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBkYXRhLmh0bWw7XG5cbiAgICAgICAgdGhpcy5tYXBbZGF0YS5pZF0gPSB7XG4gICAgICAgICAgICBwYXRocyAgIDogZGF0YS5wYXRocyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuTmVvLmFwcGx5Q2xhc3NDb25maWcoQ2xvbmVOb2RlKTtcblxubGV0IGluc3RhbmNlID0gTmVvLmNyZWF0ZShDbG9uZU5vZGUpO1xuXG5OZW8uYXBwbHlUb0dsb2JhbE5zKGluc3RhbmNlKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
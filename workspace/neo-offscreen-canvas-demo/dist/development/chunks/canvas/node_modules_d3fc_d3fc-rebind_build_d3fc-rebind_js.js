(self["webpackChunkneo_offscreen_canvas_demo"] = self["webpackChunkneo_offscreen_canvas_demo"] || []).push([["node_modules_d3fc_d3fc-rebind_build_d3fc-rebind_js"],{

/***/ "./node_modules/@d3fc/d3fc-rebind/build/d3fc-rebind.js":
/*!*************************************************************!*\
  !*** ./node_modules/@d3fc/d3fc-rebind/build/d3fc-rebind.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports) {

(function (global, factory) {
     true ? factory(exports) :
    0;
}(this, function (exports) { 'use strict';

    var createReboundMethod = (function (target, source, name) {
      var method = source[name];

      if (typeof method !== 'function') {
        throw new Error("Attempt to rebind ".concat(name, " which isn't a function on the source object"));
      }

      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var value = method.apply(source, args);
        return value === source ? target : value;
      };
    });

    var rebind = (function (target, source) {
      for (var _len = arguments.length, names = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        names[_key - 2] = arguments[_key];
      }

      for (var _i = 0, _names = names; _i < _names.length; _i++) {
        var name = _names[_i];
        target[name] = createReboundMethod(target, source, name);
      }

      return target;
    });

    var createTransform = function createTransform(transforms) {
      return function (name) {
        return transforms.reduce(function (name, fn) {
          return name && fn(name);
        }, name);
      };
    };

    var rebindAll = (function (target, source) {
      for (var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        transforms[_key - 2] = arguments[_key];
      }

      var transform = createTransform(transforms);

      for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        var result = transform(name);

        if (result) {
          target[result] = createReboundMethod(target, source, name);
        }
      }

      return target;
    });

    var regexify = (function (strsOrRegexes) {
      return strsOrRegexes.map(function (strOrRegex) {
        return typeof strOrRegex === 'string' ? new RegExp("^".concat(strOrRegex, "$")) : strOrRegex;
      });
    });

    var exclude = (function () {
      for (var _len = arguments.length, exclusions = new Array(_len), _key = 0; _key < _len; _key++) {
        exclusions[_key] = arguments[_key];
      }

      exclusions = regexify(exclusions);
      return function (name) {
        return exclusions.every(function (exclusion) {
          return !exclusion.test(name);
        }) && name;
      };
    });

    var include = (function () {
      for (var _len = arguments.length, inclusions = new Array(_len), _key = 0; _key < _len; _key++) {
        inclusions[_key] = arguments[_key];
      }

      inclusions = regexify(inclusions);
      return function (name) {
        return inclusions.some(function (inclusion) {
          return inclusion.test(name);
        }) && name;
      };
    });

    var includeMap = (function (mappings) {
      return function (name) {
        return mappings[name];
      };
    });

    var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
      return str[0].toUpperCase() + str.slice(1);
    };

    var prefix = (function (prefix) {
      return function (name) {
        return prefix + capitalizeFirstLetter(name);
      };
    });

    exports.exclude = exclude;
    exports.include = include;
    exports.includeMap = includeMap;
    exports.prefix = prefix;
    exports.rebind = rebind;
    exports.rebindAll = rebindAll;

    Object.defineProperty(exports, '__esModule', { value: true });

}));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2NhbnZhcy9ub2RlX21vZHVsZXNfZDNmY19kM2ZjLXJlYmluZF9idWlsZF9kM2ZjLXJlYmluZF9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0EsSUFBSSxLQUE0RDtBQUNoRSxJQUFJLENBQytEO0FBQ25FLENBQUMsNEJBQTRCOztBQUU3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRFQUE0RSxhQUFhO0FBQ3pGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhGQUE4RixhQUFhO0FBQzNHO0FBQ0E7O0FBRUEsdUNBQXVDLG9CQUFvQjtBQUMzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxtR0FBbUcsYUFBYTtBQUNoSDtBQUNBOztBQUVBOztBQUVBLDJEQUEyRCwwQkFBMEI7QUFDckY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQSxnRkFBZ0YsYUFBYTtBQUM3RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGdGQUFnRixhQUFhO0FBQzdGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtREFBbUQsYUFBYTs7QUFFaEUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby1vZmZzY3JlZW4tY2FudmFzLWRlbW8vLi9ub2RlX21vZHVsZXMvQGQzZmMvZDNmYy1yZWJpbmQvYnVpbGQvZDNmYy1yZWJpbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLmZjID0gZ2xvYmFsLmZjIHx8IHt9KSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBjcmVhdGVSZWJvdW5kTWV0aG9kID0gKGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgbmFtZSkge1xuICAgICAgdmFyIG1ldGhvZCA9IHNvdXJjZVtuYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdCB0byByZWJpbmQgXCIuY29uY2F0KG5hbWUsIFwiIHdoaWNoIGlzbid0IGEgZnVuY3Rpb24gb24gdGhlIHNvdXJjZSBvYmplY3RcIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlID0gbWV0aG9kLmFwcGx5KHNvdXJjZSwgYXJncyk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gc291cmNlID8gdGFyZ2V0IDogdmFsdWU7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdmFyIHJlYmluZCA9IChmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBuYW1lcyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIG5hbWVzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbmFtZXMgPSBuYW1lczsgX2kgPCBfbmFtZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gX25hbWVzW19pXTtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gY3JlYXRlUmVib3VuZE1ldGhvZCh0YXJnZXQsIHNvdXJjZSwgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSk7XG5cbiAgICB2YXIgY3JlYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtKHRyYW5zZm9ybXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3Jtcy5yZWR1Y2UoZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgICAgICAgcmV0dXJuIG5hbWUgJiYgZm4obmFtZSk7XG4gICAgICAgIH0sIG5hbWUpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIHJlYmluZEFsbCA9IChmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB0cmFuc2Zvcm1zID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgdHJhbnNmb3Jtc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBjcmVhdGVUcmFuc2Zvcm0odHJhbnNmb3Jtcyk7XG5cbiAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgX2kgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gX09iamVjdCRrZXlzW19pXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRyYW5zZm9ybShuYW1lKTtcblxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgdGFyZ2V0W3Jlc3VsdF0gPSBjcmVhdGVSZWJvdW5kTWV0aG9kKHRhcmdldCwgc291cmNlLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0pO1xuXG4gICAgdmFyIHJlZ2V4aWZ5ID0gKGZ1bmN0aW9uIChzdHJzT3JSZWdleGVzKSB7XG4gICAgICByZXR1cm4gc3Ryc09yUmVnZXhlcy5tYXAoZnVuY3Rpb24gKHN0ck9yUmVnZXgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHJPclJlZ2V4ID09PSAnc3RyaW5nJyA/IG5ldyBSZWdFeHAoXCJeXCIuY29uY2F0KHN0ck9yUmVnZXgsIFwiJFwiKSkgOiBzdHJPclJlZ2V4O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZXhjbHVkZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZXhjbHVzaW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgZXhjbHVzaW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgZXhjbHVzaW9ucyA9IHJlZ2V4aWZ5KGV4Y2x1c2lvbnMpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBleGNsdXNpb25zLmV2ZXJ5KGZ1bmN0aW9uIChleGNsdXNpb24pIHtcbiAgICAgICAgICByZXR1cm4gIWV4Y2x1c2lvbi50ZXN0KG5hbWUpO1xuICAgICAgICB9KSAmJiBuYW1lO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHZhciBpbmNsdWRlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbmNsdXNpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBpbmNsdXNpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBpbmNsdXNpb25zID0gcmVnZXhpZnkoaW5jbHVzaW9ucyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGluY2x1c2lvbnMuc29tZShmdW5jdGlvbiAoaW5jbHVzaW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGluY2x1c2lvbi50ZXN0KG5hbWUpO1xuICAgICAgICB9KSAmJiBuYW1lO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHZhciBpbmNsdWRlTWFwID0gKGZ1bmN0aW9uIChtYXBwaW5ncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBtYXBwaW5nc1tuYW1lXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICB2YXIgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICAgICAgcmV0dXJuIHN0clswXS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICAgIH07XG5cbiAgICB2YXIgcHJlZml4ID0gKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKG5hbWUpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGV4cG9ydHMuZXhjbHVkZSA9IGV4Y2x1ZGU7XG4gICAgZXhwb3J0cy5pbmNsdWRlID0gaW5jbHVkZTtcbiAgICBleHBvcnRzLmluY2x1ZGVNYXAgPSBpbmNsdWRlTWFwO1xuICAgIGV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuICAgIGV4cG9ydHMucmViaW5kID0gcmViaW5kO1xuICAgIGV4cG9ydHMucmViaW5kQWxsID0gcmViaW5kQWxsO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
import e from"../../../src/core/Base.mjs";export default Neo.setupClass(class extends e{static config={className:"MyApp.canvas.Helper",singleton:!0,itemsAmount_:1e4,remote:{app:["changeItemsAmount","enableAnimation","renderSeries","updateSize"]},stopAnimation_:!1};canvasId=null;canvasSize=null;data=null;series=null;xScale=null;yScale=null;construct(e){super.construct(e);let t=this;t.promiseImportD3().then((()=>{t.xScale=d3.scaleLinear().domain([-5,5]),t.yScale=d3.scaleLinear().domain([-5,5]),t.generateData(),t.generateSeries(),t.canvasId&&(t.renderSeries(t.canvasId),t.updateSize(t.canvasSize))}))}afterSetItemsAmount(e,t){if(e&&Neo.isNumber(t)){let e=this;e.stopAnimation=!0,e.generateData(),e.generateSeries(),e.renderSeries(e.canvasId,!0),e.stopAnimation=!1}}afterSetStopAnimation(e,t){!e&&Neo.isBoolean(t)&&this.render()}changeItemsAmount(e){this.itemsAmount=e}enableAnimation(e){this.stopAnimation=!e}generateData(){let e=d3.randomNormal(0,1),t=d3.randomLogNormal();this.data=Array.from({length:this.itemsAmount},(()=>({x:e(),y:e(),size:10*t()})))}generateSeries(){let e=this,t=d3.scaleOrdinal(d3.schemeAccent),s=fc.seriesWebglPoint().xScale(e.xScale).yScale(e.yScale).crossValue((e=>e.x)).mainValue((e=>e.y)).size((e=>e.size)).equals((e=>e.length>0)),a=fc.webglFillColor().value(((e,s)=>(e=>{let{r:t,g:s,b:a,opacity:i}=d3.color(e).rgb();return[t/255,s/255,a/255,i]})(t(s)))).data(e.data);s.decorate((e=>a(e))),e.series=s}async promiseImportD3(){let e,t=[()=>import("../../../../../node_modules/d3-array/dist/d3-array.js"),()=>import("../../../../../node_modules/d3-color/dist/d3-color.js"),()=>import("../../../../../node_modules/d3-format/dist/d3-format.js"),()=>import("../../../../../node_modules/d3-interpolate/dist/d3-interpolate.js"),()=>import("../../../../../node_modules/d3-scale-chromatic/dist/d3-scale-chromatic.js"),()=>import("../../../../../node_modules/d3-random/dist/d3-random.js"),()=>import("../../../../../node_modules/d3-scale/dist/d3-scale.js"),()=>import("../../../../../node_modules/d3-shape/dist/d3-shape.js"),()=>import("../../../../../node_modules/d3-time-format/dist/d3-time-format.js"),()=>import("../../../../../node_modules/@d3fc/d3fc-extent/build/d3fc-extent.js"),()=>import("../../../../../node_modules/@d3fc/d3fc-random-data/build/d3fc-random-data.js"),()=>import("../../../../../node_modules/@d3fc/d3fc-rebind/build/d3fc-rebind.js"),()=>import("../../../../../node_modules/@d3fc/d3fc-series/build/d3fc-series.js"),()=>import("../../../../../node_modules/@d3fc/d3fc-webgl/build/d3fc-webgl.js")],s=[],a=0,i=t.length;for(;a<i;a++)e=await t[a](),s.push(e);return self.fc||(self.fc={},s.forEach((e=>{Object.keys(e).length>0&&Object.assign(self.fc,e)}))),Promise.resolve()}render(){let e=this,t=5*(.51+.49*Math.sin(Date.now()/1e3));e.stopAnimation||(e.xScale.domain([-t,t]),e.yScale.domain([-t,t]),e.series(e.data),requestAnimationFrame(e.render.bind(e)))}renderSeries(e,t=!1){let s,a=this;a.canvasId=e,a.series&&(s=Neo.currentWorker.map[e].getContext("webgl"),a.series.context(s),!t&&a.render())}updateSize(e){let t=this;if(t.canvasSize=e,t.series){let s=t.series.context();Object.assign(s.canvas,{height:e.height,width:e.width}),s.viewport(0,0,s.canvas.width,s.canvas.height)}}});